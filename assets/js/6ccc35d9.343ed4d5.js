"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[36277],{12933:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"2020-06-30-secured_nifi_cluster_on_gcp_with_external_dns","metadata":{"permalink":"/nifikop/blog/2020-06-30-secured_nifi_cluster_on_gcp_with_external_dns","source":"@site/blog/2020-06-30-secured_nifi_cluster_on_gcp_with_external_dns.md","title":"Secured NiFi cluster with NiFiKop with external dns on the Google Cloud Platform","description":"Objectives","date":"2020-06-30T00:00:00.000Z","tags":[{"label":"gke","permalink":"/nifikop/blog/tags/gke"},{"label":"nifikop","permalink":"/nifikop/blog/tags/nifikop"},{"label":"secured","permalink":"/nifikop/blog/tags/secured"},{"label":"oidc","permalink":"/nifikop/blog/tags/oidc"},{"label":"google cloud platform","permalink":"/nifikop/blog/tags/google-cloud-platform"},{"label":"google cloud","permalink":"/nifikop/blog/tags/google-cloud"},{"label":"gcp","permalink":"/nifikop/blog/tags/gcp"},{"label":"kubernetes","permalink":"/nifikop/blog/tags/kubernetes"}],"readingTime":7.865,"hasTruncateMarker":false,"authors":[{"name":"Alexandre Guitton","title":"Alexandre Guitton","url":"https://github.com/erdrix","imageURL":"https://avatars0.githubusercontent.com/u/10503351?s=460&u=ea08d802388c79c17655c314296be58814391572&v=4"}],"frontMatter":{"slug":"2020-06-30-secured_nifi_cluster_on_gcp_with_external_dns","title":"Secured NiFi cluster with NiFiKop with external dns on the Google Cloud Platform","author":"Alexandre Guitton","author_title":"Alexandre Guitton","author_url":"https://github.com/erdrix","author_image_url":"https://avatars0.githubusercontent.com/u/10503351?s=460&u=ea08d802388c79c17655c314296be58814391572&v=4","tags":["gke","nifikop","secured","oidc","google cloud platform","google cloud","gcp","kubernetes"]},"unlisted":false,"nextItem":{"title":"Secured NiFi cluster with NiFiKop on the Google Cloud Platform","permalink":"/nifikop/blog/secured_nifi_cluster_on_gcp"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n## Objectives\\n\\nThis article is pretty similar to the [Secured NiFi cluster with NiFiKop on the Google Cloud Platform](./2020-05-20-secured_nifi_cluster_on_gcp.md) one.\\n\\nThis time, we will also use **NiFiKop** and **Terraform** to quickly: \\n                                 \\n- deploy **a GKE cluster** to host our NiFi cluster,\\n- deploy **a `cert-manager` issuer** as a convenient way to generate TLS certificates,\\n- deploy **a zookeeper instance** to manage cluster coordination and state across the cluster, \\n- deploy **X secured NiFi instances in cluster mode**\\n- configure **NiFi to use OpenId connect** for authentication\\n- configure **HTTPS loadbalancer with Client Ip affinity** to access the NiFi cluster\\n- dynamically re-size the cluster\\n\\nWe will:\\n\\n- deploy [external DNS](https://github.com/kubernetes-sigs/external-dns) instead of manually declare our DNS names.\\n- delegate the certificates authority to [Let\'s Encrypt](https://letsencrypt.org/)\\n\\n## Pre-requisites\\n\\n- You have your own domain ([you can create one with Google](https://domains.google/)): it will be used to map a domain on the NiFi\'s web interface. In this post, we will use: `trycatchlearn.fr`. \\n\\n### Disclaimer\\n\\nThis article can get you started for a production deployment, but should not used as so. There are still some steps needed such as Zookeeper, GKE configuration etc.\\n\\n### Create OAuth Credentials\\n\\nFirst step is to create the OAuth Credential: \\n\\n- Go to your GCP project, and in the left bar: **APIs & Services > Credentials**\\n- Click on `CREATE CREDENTIALS: OAuth client ID`\\n- Select `Web Application`\\n- Give a name such as `SecuredNifi`. \\n- For `Authorised JavaScript origins`, use your own domain. I\'m using: `https://nifi.orange.trycatchlearn.fr:8443`\\n- For `Authorised redirect URIs` it\'s your previous URI + `/nifi-api/access/oidc/callback`, for me: `https://nifi.orange.trycatchlearn.fr:8443/nifi-api/access/oidc/callback`\\n\\n\\n![OAuth credentials](/img/blog/2020-06-30-secured_nifi_cluster_on_gcp_with_external_dns/oauth_credentials.png)\\n\\n- Create the OAuth credentials\\n\\nOnce the credentials are created, you will get a client ID and a client secret that you will need in `NifiCluster` definition.\\n\\n### Create service account\\n\\nFor the GKE cluster deployment you need a service account with `Editor` role, and `Kubernetes Engine Admin`.\\n\\n## Deploy secured cluster\\n\\nOnce you have completed the above prerequisites, deploying you NiFi cluster will only take three steps and few minutes.\\n\\nOpen your Google Cloud Console in your GCP project and run: \\n\\n```sh\\ngit clone https://github.com/Okonpyutaika/nifikop.git\\ncd nifikop/docs/tutorials/secured_nifi_cluster_on_gcp_with_external_dns\\n```\\n\\n### Deploy GKE cluster with Terraform\\n\\n#### Deployment \\n\\nYou can configure variables before running the deployment in the file `terraform/env/demo.tfvars`: \\n\\n- **project**: GCP project ID\\n- **region**: GCP region\\n- **zone**: GCP zone\\n- **cluster_machines_types**: defines the machine type for GKE cluster nodes\\n- **min_node**: minimum number of nodes in the NodePool. Must be \\\\>=0 and \\\\<= max_node_count.\\n- **max_node**: maximum number of nodes in the NodePool. Must be \\\\>= min_node_count.\\n- **initial_node_count**: the number of nodes to create in this cluster\'s default node pool.\\n- **preemptible**: true/false using preemptibles nodes.\\n\\n```sh\\ncd terraform\\n./start.sh <service account key\'s path>\\n```\\n\\nThis operation could take 15 minutes (time to the GKE cluster and its nodes to setup)\\n\\nOnce the deployment is ready load the GKE configuration: \\n\\n```console\\ngcloud container clusters get-credentials nifi-cluster --zone <configured gcp zone> --project <GCP project\'s id>\\n```\\n\\n#### Explanations\\n\\nThe first step is to deploy a GKE cluster, with the required configuration, you can for example check the nodes configuration: \\n\\n```console\\nkubectl get nodes\\nNAME                                                  STATUS   ROLES    AGE    VERSION\\ngke-nifi-cluster-tracking-ptf20200520-a1aec8fe-2dl3   Ready    <none>   110m   v1.15.9-gke.24\\ngke-nifi-cluster-tracking-ptf20200520-a1aec8fe-5bzb   Ready    <none>   110m   v1.15.9-gke.24\\ngke-nifi-cluster-tracking-ptf20200520-a1aec8fe-5t3l   Ready    <none>   110m   v1.15.9-gke.24\\ngke-nifi-cluster-tracking-ptf20200520-a1aec8fe-w86j   Ready    <none>   110m   v1.15.9-gke.24\\n```\\n\\nOnce the cluster is deployed, we created all the required namespaces: \\n\\n```console\\nkubectl get namespaces\\nNAME              STATUS   AGE\\ncert-manager      Active   16m\\ndefault           Active   27m\\nkube-node-lease   Active   27m\\nkube-public       Active   27m\\nkube-system       Active   27m\\nnifikop           Active   16m\\nzookeeper         Active   16m\\n```\\n\\nIn the `cert-manager` namespace we deployed a `cert-manager` stack in a cluster-wide scope, which will be responsible for all the certificates generation.\\n\\n:::note\\nin this post, we will let `let\'s encrypt` act as certificate authority. \\nFor more informations check [documentation page](/nifikop/docs/3_manage_nifi/1_manage_clusters/1_deploy_cluster/4_ssl_configuration#using-an-existing-issuer)\\n:::\\n\\n```console\\nkubectl -n cert-manager get pods\\nNAME                                       READY   STATUS    RESTARTS   AGE\\ncert-manager-55fff7f85f-74nf5              1/1     Running   0          72m\\ncert-manager-cainjector-54c4796c5d-mfbbx   1/1     Running   0          72m\\ncert-manager-webhook-77ccf5c8b4-m6ws4      1/1     Running   2          72m\\n```\\n\\nIt will also deploy the Zookeeper cluster based on the [bitnami helm chart](https://github.com/bitnami/charts/tree/master/bitnami/zookeeper): \\n\\n```console\\nkubectl -n zookeeper get pods\\nNAME          READY   STATUS    RESTARTS   AGE\\nzookeeper-0   1/1     Running   0          74m\\nzookeeper-1   1/1     Running   0          74m\\nzookeeper-2   1/1     Running   0          74m\\n```\\n\\nAnd finally it deploys the `NiFiKop` operator which is ready to create NiFi clusters: \\n\\n\\n```console\\nkubectl -n nifikop get pods\\nNAME                            READY   STATUS    RESTARTS   AGE\\nexternal-dns-5d588c6cd6-dw44f   1/1     Running   0          2m58s\\n```\\n\\n### Deploy NiFiKop\\n\\nNow we have to deploy the `NiFiKop` operator: \\n\\nDeploy the NiFiKop crds: \\n\\n<Tabs\\n  defaultValue=\\"k8s16+\\"\\n  values={[\\n    { label: \'k8s version 1.16+\', value: \'k8s16+\', },\\n    { label: \'k8s previous versions\', value: \'k8sprev\', },\\n  ]\\n}>\\n<TabItem value=\\"k8s16+\\">\\n\\n```bash\\nkubectl apply -f https://raw.githubusercontent.com/Orange-OpenSource/nifikop/master/deploy/crds/nifi.orange.com_nificlusters_crd.yaml\\nkubectl apply -f https://raw.githubusercontent.com/Orange-OpenSource/nifikop/master/deploy/crds/nifi.orange.com_nifiusers_crd.yaml\\n```\\n\\n</TabItem>\\n<TabItem value=\\"k8sprev\\">\\n\\n```bash\\nkubectl apply -f https://raw.githubusercontent.com/Orange-OpenSource/nifikop/master/deploy/crds/v1beta1/nifi.orange.com_nificlusters_crd.yaml\\nkubectl apply -f https://raw.githubusercontent.com/Orange-OpenSource/nifikop/master/deploy/crds/v1beta1/nifi.orange.com_nifiusers_crd.yaml\\n```\\n</TabItem>\\n</Tabs>\\n\\n```bash\\nhelm repo add orange-incubator https://orange-kubernetes-charts-incubator.storage.googleapis.com/\\nhelm repo update\\n```\\n\\n<Tabs\\n  defaultValue=\\"helm3\\"\\n  values={[\\n    { label: \'helm 3\', value: \'helm3\', },\\n    { label: \'helm previous\', value: \'helm\', },\\n  ]\\n}>\\n<TabItem value=\\"helm3\\">\\n\\n```bash\\n# You have to create the namespace before executing following command\\nhelm install nifikop \\\\\\n    --namespace=nifikop \\\\\\n    --set image.tag=v0.2.1-release \\\\\\n    orange-incubator/nifikop\\n```\\n\\n</TabItem>\\n<TabItem value=\\"helm\\">\\n\\n```bash\\nhelm install --name=nifikop \\\\\\n    --namespace=nifikop \\\\\\n    --set image.tag=v0.2.1-release \\\\\\n    orange-incubator/nifikop\\n```\\n</TabItem>\\n</Tabs>\\n\\n### Deploy Let\'s encrypt issuer\\n\\nAs mentioned at the start of the article, we want to delegate the certificate authority to [Let\'s Encrypt](https://letsencrypt.org/), so to do this with `cert-manager` we have to create an issuer.\\nSo edit the `kubernetes/nifi/letsencryptissuer.yaml` and set it with your own values:  \\n\\n```yaml\\napiVersion: cert-manager.io/v1alpha2\\nkind: Issuer\\nmetadata:\\n  name: letsencrypt-staging\\nspec:\\n  acme:\\n    # You must replace this email address with your own.\\n    # Let\'s Encrypt will use this to contact you about expiring\\n    # certificates, and issues related to your account.\\n    email: <your email>\\n    server: https://acme-staging-v02.api.letsencrypt.org/directory\\n    privateKeySecretRef:\\n      # Secret resource used to store the account\'s private key.\\n      name: example-issuer-account-key\\n    # Add a single challenge solver, HTTP01 using nginx\\n    solvers:\\n      - http01:\\n          ingress:\\n            ingressTemplate:\\n              metadata:\\n                annotations:\\n                  \\"external-dns.alpha.kubernetes.io/ttl\\": \\"5\\"\\n```\\n\\nYou just have to change the `Spec.Acme.Email` field with your own email.\\nYou can also change the acme server to prod one `https://acme-v02.api.letsencrypt.org/directory`\\n\\nOnce the configuration is ok, you can deploy the `Issuer`: \\n\\n```console\\ncd ..\\nkubectl create -f kubernetes/nifi/letsencryptissuer.yaml\\n```\\n\\n\\n### Deploy Secured NiFi cluster\\n\\nYou will now deploy your secured cluster to do so edit the `kubernetes/nifi/secured_nifi_cluster.yaml` and set with your own values: \\n\\n```yaml\\napiVersion: nifi.orange.com/v1alpha1\\nkind: NifiCluster\\nmetadata:\\n  name: securednificluster\\n  namespace: nifi\\nspec:\\n  ...\\n  initialAdminUser: <your google account email>\\n  readOnlyConfig:\\n    # NifiProperties configuration that will be applied to the node.\\n    nifiProperties:\\n      webProxyHosts:\\n        - <nifi\'s hostname>:8443\\n      # Additionnal nifi.properties configuration that will override the one produced based\\n      # on template and configurations.\\n      overrideConfigs: |\\n        ...\\n        nifi.security.user.oidc.client.id=<oidc client\'s id>\\n        nifi.security.user.oidc.client.secret=<oidc client\'s secret>\\n        ...\\n    ...\\n  ...\\n  listenersConfig:\\n    useExternalDNS: true\\n    clusterDomain: <nifi\'s domain name>\\n    sslSecrets:\\n      tlsSecretName: \\"test-nifikop\\"\\n      create: true\\n      issuerRef:\\n        name: letsencrypt-staging\\n        kind: Issuer\\n```\\n\\n- **Spec.InitialAdminUser**: Your GCP account email (this will give you the admin role into the NiFi cluster), in my case `alexandre.guitton@orange.com`\\n- **Spec.ReadOnlyConfig.NifiProperties.WebProxyHosts\\\\[0\\\\]**: The web hostname configured in the Oauth section, in my case `nifi.orange.trycatchlearn.fr`\\n- **Spec.ReadOnlyConfig.NifiProperties.OverrideConfigs**: you have to set the following properties: \\n    - *nifi.security.user.oidc.client.id*: OAuth Client ID\\n    - *nifi.security.user.oidc.client.secret*: OAuth Client secret\\n- **Spec.ListenersConfig.ClusterDomain**: This the domain name you configure into your `External DNS` and `Cloud DNS` zone. In my case `orange.trycatchlearn.fr`\\n  \\n    \\nOnce the configuration is ok, you can deploy the `NifiCluster`: \\n\\n```console\\nkubectl create -f kubernetes/nifi/secured_nifi_cluster.yaml\\n```\\n\\nThe first time can take some time, the `cert-manager` and `Let\'s encrypt` will check that you are able to manage the dns zone, so if you check the pods:  \\n\\n```console\\nkubectl get pods -n nifikop\\nNAME                            READY   STATUS    RESTARTS   AGE\\ncm-acme-http-solver-4fg5b       1/1     Running   0          18s\\ncm-acme-http-solver-6sw9x       1/1     Running   0          20s\\ncm-acme-http-solver-bpzvm       1/1     Running   0          20s\\ncm-acme-http-solver-f8xvs       1/1     Running   0          19s\\ncm-acme-http-solver-k997c       1/1     Running   0          17s\\ncm-acme-http-solver-l5fzz       1/1     Running   0          18s\\nexternal-dns-569bf79b57-hjmtt   1/1     Running   0          9h\\nnifikop-56cb587d96-p8vdf        1/1     Running   0          29s\\n```\\n\\nAnd check the ingresses: \\n\\n```bash\\nkubectl get ingresses -n nifikop\\nNAME                        HOSTS                                                 ADDRESS          PORTS   AGE\\ncm-acme-http-solver-4pff9   nifi-2-node.nifi-headless.orange.trycatchlearn.fr                      80      2m27s\\ncm-acme-http-solver-cfsf4   nifi-0-node.nifi-headless.orange.trycatchlearn.fr     34.120.24.109    80      2m30s\\ncm-acme-http-solver-hn8jj   nifi-controller.nifikop.mgt.orange.trycatchlearn.fr   34.120.90.24     80      2m29s\\ncm-acme-http-solver-llhsp   nifi-1-node.nifi-headless.orange.trycatchlearn.fr                      80      2m27s\\ncm-acme-http-solver-v8dmm   nifi-headless.orange.trycatchlearn.fr                 34.120.201.215   80      2m28s\\ncm-acme-http-solver-xvs9f   nifi.orange.trycatchlearn.fr                          35.244.202.176   80      2m27s\\n```\\n\\nYou can see some ngnix instances that are used to validate all the dns names you required into your certificates (for nodes and services).\\n\\nAfter some times your cluster should be running: \\n\\n```console\\nkubectl get pods -n nifikop\\nNAME                            READY   STATUS    RESTARTS   AGE\\nexternal-dns-569bf79b57-hjmtt   1/1     Running   0          9h\\nnifi-0-nodekmhgz                1/1     Running   0          27m\\nnifi-1-node4465q                1/1     Running   0          27m\\nnifi-2-node5jwwx                1/1     Running   0          27m\\nnifikop-56cb587d96-p8vdf        1/1     Running   0          40m\\n```\\n\\n### Access to your secured NiFi Cluster\\n\\nYou can now access the NiFi cluster using the loadbalancer service hostname `<nifi\'s cluster name>.<DNS name>`, in my case it\'s [https://nifi.orange.trycatchlearn.fr:8443/nifi](https://nifi.orange.trycatchlearn.fr:8443/nifi) and authenticate on the cluster using the admin account email address configured in the `NifiCluster` resource.\\n\\nHere is my 3-nodes secured NiFi cluster up and running: \\n\\n![3 nodes cluster](/img/blog/2020-06-30-secured_nifi_cluster_on_gcp_with_external_dns/3_nodes_cluster.png)\\n\\n3-nodes secured NiFi cluster: \\n\\n![3 nodes](/img/blog/2020-06-30-secured_nifi_cluster_on_gcp_with_external_dns/3_nodes.png)\\n\\nYou can now update the authorizations and add additional users/groups.\\n\\n:::note\\nJust have a look on [documentation\'s page](https://orange-opensource.github.io/nifikop/docs/3_tasks/2_security/1_ssl#operator-access-policies) to finish cleaning setup.\\nAnd you can now start to play with scaling, following the [documentation\'s page](https://orange-opensource.github.io/nifikop/docs/3_tasks/2_security/1_ssl#scale-up---node-declaration)\\n:::\\n\\n## Cleaning\\n\\nStart to remove you NiFi cluster and NiFiKop operator: \\n\\n```bash\\nkubectl delete nificlusters.nifi.orange.com nifi -n nifikop\\nhelm del nifikop\\nkubectl delete crds nificlusters.nifi.orange.com\\nkubectl delete crds nifiusers.nifi.orange.com\\nkubectl delete issuers.cert-manager.io letsencrypt-staging -n nifikop\\n```\\n\\nTo destroy all resources you created, you just need to run: \\n\\n```consol\\ncd terraform\\n./destroy.sh <service account key\'s path>\\n```"},{"id":"secured_nifi_cluster_on_gcp","metadata":{"permalink":"/nifikop/blog/secured_nifi_cluster_on_gcp","source":"@site/blog/2020-05-20-secured_nifi_cluster_on_gcp.md","title":"Secured NiFi cluster with NiFiKop on the Google Cloud Platform","description":"Credits","date":"2020-05-20T00:00:00.000Z","tags":[{"label":"gke","permalink":"/nifikop/blog/tags/gke"},{"label":"nifikop","permalink":"/nifikop/blog/tags/nifikop"},{"label":"secured","permalink":"/nifikop/blog/tags/secured"},{"label":"oidc","permalink":"/nifikop/blog/tags/oidc"},{"label":"google cloud platform","permalink":"/nifikop/blog/tags/google-cloud-platform"},{"label":"google cloud","permalink":"/nifikop/blog/tags/google-cloud"},{"label":"gcp","permalink":"/nifikop/blog/tags/gcp"},{"label":"kubernetes","permalink":"/nifikop/blog/tags/kubernetes"}],"readingTime":5.575,"hasTruncateMarker":false,"authors":[{"name":"Alexandre Guitton","title":"Alexandre Guitton","url":"https://github.com/erdrix","imageURL":"https://avatars0.githubusercontent.com/u/10503351?s=460&u=ea08d802388c79c17655c314296be58814391572&v=4"}],"frontMatter":{"slug":"secured_nifi_cluster_on_gcp","title":"Secured NiFi cluster with NiFiKop on the Google Cloud Platform","author":"Alexandre Guitton","author_title":"Alexandre Guitton","author_url":"https://github.com/erdrix","author_image_url":"https://avatars0.githubusercontent.com/u/10503351?s=460&u=ea08d802388c79c17655c314296be58814391572&v=4","tags":["gke","nifikop","secured","oidc","google cloud platform","google cloud","gcp","kubernetes"]},"unlisted":false,"prevItem":{"title":"Secured NiFi cluster with NiFiKop with external dns on the Google Cloud Platform","permalink":"/nifikop/blog/2020-06-30-secured_nifi_cluster_on_gcp_with_external_dns"}},"content":"## Credits\\n\\nBefore starting, I wanted to mention the fact that this post is an adaptation of the [Pierre Villard](https://twitter.com/pvillard31)\'s one: [Secured NiFi cluster with Terraform on the Google Cloud Platform](https://pierrevillard.com/2019/11/22/secured-nifi-cluster-with-terraform-on-the-google-cloud-platform/)\\n\\n## Objectives\\n\\nIn this article, we\'ll use **NiFiKop** and **Terraform** to quickly: \\n\\n- deploy **a GKE cluster** to host our NiFi cluster,\\n- deploy **a `cert-manager` issuer** as a convenient way to generate TLS certificates,\\n- deploy **a zookeeper instance** to manage cluster coordination and state across the cluster, \\n- deploy **X secured NiFi instances in cluster mode**\\n- configure **NiFi to use OpenId connect** for authentication\\n- configure **HTTPS loadbalancer with Client Ip affinity** to access to the NiFi cluster\\n- re-size the cluster dynamically\\n\\n## Pre-requisites\\n\\n- You have your own domain ([you can create on with Google](https://domains.google/)): it will be used to map a domain to the NiFi\'s web interface. In this post, we will use: `trycatchlearn.fr`. \\n\\n### Disclaimer\\n\\nThis article can get you started for a production deployment, but should not used as so. There is still some steps needed such as Zookeeper configuration etc.\\n\\n### Create OAuth Credentials\\n\\nFirst step is to create the OAuth Credential: \\n\\n- Go to your GCP project, and in the left bar: **APIs & Services > Credentials**\\n- Click on `CREATE CREDENTIALS: OAuth client ID`\\n- Select `Web Application`\\n- Give a name like `SecuredNifi`. \\n- For `Authorised JavaScript origins`, use your own domain. I\'m using: `https://nifisecured.trycatchlearn.fr:8443`\\n- For `Authorised redirect URIs` it\'s your previous URI + `/nifi-api/access/oidc/callback`, for me: `https://nifisecured.trycatchlearn.fr:8443/nifi-api/access/oidc/callback`\\n\\n\\n![OAuth credentials](/img/blog/2020-05-20-secured_nifi_cluster_on_gcp/oauth_credentials.png)\\n\\n- Create the OAuth credentials\\n\\nOnce the credentials are created, you will get a client ID and a client secret that you will need in `NifiCluster` definition.\\n\\n### Create service account\\n\\nFor the GKE cluster deployment you need a service account with `Editor` role, and `Kubernetes Engine Admin`.\\n\\n## Deploy secured cluster\\n\\nOnce you have completed the above prerequisites, deploying you NiFi cluster will only take three steps and few minutes.\\n\\nOpen your Google Cloud Console in your GCP project and run: \\n\\n```sh\\ngit clone https://github.com/konpyutaika/nifikop/nifikop.git\\ncd nifikop/docs/tutorials/secured_nifi_cluster_on_gcp\\n```\\n\\n### Deploy GKE cluster with Terraform\\n\\n#### Deployment \\n\\nYou can configure variable before running the deployment in the file `terraform/env/demo.tfvars`: \\n\\n- **project**: GCP project ID\\n- **region**: GCP region\\n- **zone**: GCP zone\\n- **cluster_machines_types**: defines the machine type for GKE cluster nodes\\n- **min_node**: minimum number of nodes in the NodePool. Must be \\\\>=0 and \\\\<= max_node_count.\\n- **max_node**: maximum number of nodes in the NodePool. Must be \\\\>= min_node_count.\\n- **initial_node_count**: the number of nodes to create in this cluster\'s default node pool.\\n- **preemptible**: true/false using preemptibles nodes.\\n- **nifikop_image_repo**: NiFiKop\'s image repository\\n- **nifikop_image_tag**: NiFiKop\'s image tag\\n- **nifikop_chart_version**: NiFiKop\'s helm chart version\\n\\n```sh\\n./start.sh <service account key\'s path>\\n```\\n\\nThis operation could take 15 minutes (time to the GKE cluster and its nodes to setup)\\n\\nOnce the deployment is ready load the GKE configuration: \\n\\n```console\\ngcloud container clusters get-credentials nifi-cluster --zone <configured gcp zone> --project <GCP project\'s id>\\n```\\n\\n#### Explanations\\n\\nThe first step is to deploy a GKE cluster, with the required configuration, you can for example check the nodes configuration: \\n\\n```console\\nkubectl get nodes\\nNAME                                                  STATUS   ROLES    AGE    VERSION\\ngke-nifi-cluster-tracking-ptf20200520-a1aec8fe-2dl3   Ready    <none>   110m   v1.15.9-gke.24\\ngke-nifi-cluster-tracking-ptf20200520-a1aec8fe-5bzb   Ready    <none>   110m   v1.15.9-gke.24\\ngke-nifi-cluster-tracking-ptf20200520-a1aec8fe-5t3l   Ready    <none>   110m   v1.15.9-gke.24\\ngke-nifi-cluster-tracking-ptf20200520-a1aec8fe-w86j   Ready    <none>   110m   v1.15.9-gke.24\\n```\\n\\nOnce the cluster is deployed, we created all the required namespaces: \\n\\n```console\\nkubectl get namespaces\\nNAME              STATUS   AGE\\ncert-manager      Active   106m\\ndefault           Active   116m\\nkube-node-lease   Active   116m\\nkube-public       Active   116m\\nkube-system       Active   116m\\nnifi              Active   106m\\nzookeeper         Active   106m\\n```\\n\\nIn the `cert-manager` namespace we deployed a `cert-manager` stack in a cluster-wide scope, which will be responsible for all the certificates generation.\\n\\n:::note\\nin this post, we will let `cert-manager` create a self-signed CA. \\nFor more information check [documentation page](https://konpyutaika.github.io/nifikop/docs/3_tasks/2_security/1_ssl)\\n:::\\n\\n```console\\nkubectl -n cert-manager get pods\\nNAME                                       READY   STATUS    RESTARTS   AGE\\ncert-manager-55fff7f85f-74nf5              1/1     Running   0          72m\\ncert-manager-cainjector-54c4796c5d-mfbbx   1/1     Running   0          72m\\ncert-manager-webhook-77ccf5c8b4-m6ws4      1/1     Running   2          72m\\n```\\n\\nIt will also deploy the Zookeeper cluster based on the [bitnami helm chart](https://github.com/bitnami/charts/tree/master/bitnami/zookeeper): \\n\\n```console\\nkubectl -n zookeeper get pods\\nNAME          READY   STATUS    RESTARTS   AGE\\nzookeeper-0   1/1     Running   0          74m\\nzookeeper-1   1/1     Running   0          74m\\nzookeeper-2   1/1     Running   0          74m\\n```\\n\\nAnd finally it deploy the `NiFiKop` operator which is ready to create NiFi clusters: \\n\\n\\n```console\\nkubectl -n nifi get pods\\nNAME          READY   STATUS    RESTARTS   AGE\\nnifikop-849fc8548f-ss6w4   1/1     Running   0          74m\\n```\\n\\n### Deploy Secured NiFi cluster\\n\\nYou will now deploy your secured cluster to do so edit the `kubernetes/nifi/secured_nifi_cluster.yaml` and set with your own values: \\n\\n```yaml\\napiVersion: nifi.orange.com/v1alpha1\\nkind: NifiCluster\\nmetadata:\\n  name: securednificluster\\n  namespace: nifi\\nspec:\\n  ...\\n  initialAdminUser: <your google account email>\\n  readOnlyConfig:\\n    # NifiProperties configuration that will be applied to the node.\\n    nifiProperties:\\n      webProxyHosts:\\n        - <nifi\'s hostname>:8443\\n      # Additionnal nifi.properties configuration that will override the one produced based\\n      # on template and configurations.\\n      overrideConfigs: |\\n        ...\\n        nifi.security.user.oidc.client.id=<oidc client\'s id>\\n        nifi.security.user.oidc.client.secret=<oidc client\'s secret>\\n        ...\\n```\\n\\n- **Spec.InitialAdminUser**: Your GCP account email (this will give you the admin role into the NiFi cluster), in my case `aguitton.ext@orange.com`\\n- **Spec.ReadOnlyConfig.NifiProperties.WebProxyHosts\\\\[0\\\\]**: The web hostname configured in the Oauth section, in my case `nifisecured.trycatchlearn.fr`\\n- **Spec.ReadOnlyConfig.NifiProperties.OverrideConfigs**: you have to set the following properties: \\n    - *nifi.security.user.oidc.client.id*: OAuth Client ID\\n    - *nifi.security.user.oidc.client.secret*: OAuth Client secret\\n    \\nOnce the configuration is ok, you can deploy the `NifiCluster`: \\n\\n```console\\nkubectl create -f kubernetes/nifi/secured_nifi_cluster.yaml\\n```\\n\\nAfter 5 minutes your cluster should be running: \\n\\n```console\\nkubectl get pods -n nifi\\nNAME                             READY   STATUS    RESTARTS   AGE\\nnifikop-849fc8548f-ss6w4         1/1     Running   0          28h\\nsecurednificluster-0-node9tqff   1/1     Running   0          5m52s\\nsecurednificluster-1-nodew9tsd   1/1     Running   0          6m30s\\nsecurednificluster-2-nodemlxs8   1/1     Running   0          6m28s\\nsecurednificluster-3-nodeckw8p   1/1     Running   0          6m26s\\nsecurednificluster-4-nodewzjt7   1/1     Running   0          6m24s\\n```\\n\\n### Access to your secured NiFi Cluster\\n\\nTo finish you have to get the public IP of the load balancer: \\n\\n```console\\nkubectl -n nifi get svc\\nNAME                          TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)                                         AGE\\nsecurednificluster            LoadBalancer   10.15.248.159   34.78.140.135   8443:30248/TCP,6007:30517/TCP,10000:31985/TCP   27m\\nsecurednificluster-headless   ClusterIP      None            <none>          8443/TCP,6007/TCP,10000/TCP                     27m\\n```\\n\\nIn my case it\'s `34.78.140.135`.\\n\\nWe can now update the DNS records of your domains to add a DNS record of type A redirecting your hostname (in my case `nifisecured.trycatchlearn.fr`) to the load balancer IP.\\n\\nI can now access the NiFi cluster using [https://nifisecured.trycatchlearn.fr:8443/nifi](https://nifisecured.trycatchlearn.fr:8443/nifi) and authenticate on the cluster using the admin account email address I configured in the `NifiCluster` resource.\\n\\nHere is my 5-nodes secured NiFi cluster up and running: \\n\\n![6 nodes cluster](/img/blog/2020-05-20-secured_nifi_cluster_on_gcp/6_nodes_cluster.png)\\n\\n5-nodes secured NiFi cluster: \\n\\n![5 nodes](/img/blog/2020-05-20-secured_nifi_cluster_on_gcp/5_nodes.png)\\n\\nYou can now update the authorizations and add additionnal users/groups.\\n\\n:::note\\nJust have a look on [documentation\'s page](https://konpyutaika.github.io/nifikop/docs/3_tasks/2_security/1_ssl#operator-access-policies) to finish cleaning setup.\\n:::\\n\\n## Cleaning\\n\\nTo destroy all resources you created, you just need to run: \\n\\n```consol\\nkubectl delete nificlusters.nifi.orange.com securednificluster -n nifi\\nkubectl delete crds nificlusters.nifi.orange.com\\nkubectl delete crds nifiusers.nifi.orange.com\\n./destroy.sh <service account key\'s path>\\n```"}]}}')}}]);