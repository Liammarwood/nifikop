"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[35741],{43572:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>a});var i=t(24246),o=t(71670);const r={id:"4_node",title:"Node",sidebar_label:"Node"},d=void 0,s={id:"5_references/1_nifi_cluster/4_node",title:"Node",description:"Node defines the nifi node basic configuration",source:"@site/../docs/5_references/1_nifi_cluster/4_node.md",sourceDirName:"5_references/1_nifi_cluster",slug:"/5_references/1_nifi_cluster/4_node",permalink:"/nifikop/docs/next/5_references/1_nifi_cluster/4_node",draft:!1,unlisted:!1,editUrl:"https://github.com/konpyutaika/nifikop/edit/master/site/website/../docs/5_references/1_nifi_cluster/4_node.md",tags:[],version:"current",lastUpdatedBy:"Michael H",lastUpdatedAt:1689067749,formattedLastUpdatedAt:"Jul 11, 2023",frontMatter:{id:"4_node",title:"Node",sidebar_label:"Node"},sidebar:"docs",previous:{title:"Node configuration",permalink:"/nifikop/docs/next/5_references/1_nifi_cluster/3_node_config"},next:{title:"Node state",permalink:"/nifikop/docs/next/5_references/1_nifi_cluster/5_node_state"}},c={},a=[{value:"Node",id:"node",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Node defines the nifi node basic configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'    - id: 0\n      # nodeConfigGroup can be used to ease the node configuration, if set only the id is required\n      nodeConfigGroup: "default_group"\n      # readOnlyConfig can be used to pass Nifi node config\n      # which has type read-only these config changes will trigger rolling upgrade\n      readOnlyConfig:\n        nifiProperties:\n          overrideConfigs: |\n            nifi.ui.banner.text=NiFiKop - Node 0\n      # node configuration\n#       nodeConfig:\n    - id: 2\n      # readOnlyConfig can be used to pass Nifi node config\n      # which has type read-only these config changes will trigger rolling upgrade\n      readOnlyConfig:\n        overrideConfigs: |\n          nifi.ui.banner.text=NiFiKop - Node 2\n      # node configuration\n      nodeConfig:\n        resourcesRequirements:\n          limits:\n            cpu: "2"\n            memory: 3Gi\n          requests:\n            cpu: "1"\n            memory: 1Gi\n        storageConfigs:\n          # Name of the storage config, used to name PV to reuse into sidecars for example.\n          - name: provenance-repository\n            # Path where the volume will be mount into the main nifi container inside the pod.\n            mountPath: "/opt/nifi/provenance_repository"\n            # Metadata to attach to the PVC that gets created\n            metadata:\n              labels:\n                my-label: my-value\n              annotations:\n                my-annotation: my-value\n            # Kubernetes PVC spec\n            # https://kubernetes.io/docs/tasks/configure-pod-container/configure-persistent-volume-storage/#create-a-persistentvolumeclaim\n            pvcSpec:\n              accessModes:\n                - ReadWriteOnce\n              storageClassName: "standard"\n              resources:\n                requests:\n                  storage: 8Gi\n'})}),"\n",(0,i.jsx)(n.h2,{id:"node",children:"Node"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Default"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"id"}),(0,i.jsx)(n.td,{children:"int32"}),(0,i.jsx)(n.td,{children:"unique Node id."}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"-"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"nodeConfigGroup"}),(0,i.jsx)(n.td,{children:"string"}),(0,i.jsx)(n.td,{children:"can be used to ease the node configuration, if set only the id is required"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:'""'})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"readOnlyConfig"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"./2_read_only_config",children:"ReadOnlyConfig"})}),(0,i.jsx)(n.td,{children:"readOnlyConfig can be used to pass Nifi node config which has type read-only these config changes will trigger rolling upgrade."}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:"nil"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"nodeConfig"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"./3_node_config",children:"NodeConfig"})}),(0,i.jsx)(n.td,{children:"node configuration."}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:"nil"})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},71670:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>d});var i=t(27378);const o={},r=i.createContext(o);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);